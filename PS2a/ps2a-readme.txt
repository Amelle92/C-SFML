ps2a-readme

Adam Melle
	
	I used a string to represent the bits. I used this method initially because it was recommended, but after implementing everything I realized it really was easier to work with strings instead of integers. This was mainly because of all the bit shifting that had to take place. Being able to isolate each character using [] made it a lot easier than working with an integer. Basically I create an object with a seed and a bit position to tap. My step method first determines the length of the string, then it compares the last bit in the string to the tap position bit using xor. Then it shifts every bit to the left and places the xored bit at position 0. Lastly, it returns the result of xor which is the new bit in position 0. I also had to keep in mind that string positions work from left to right, and the implementation needs to work from right to left, so a little math was involved to find the correct tap position and the end of the string. The generate method was quite simple now that all the work was done in the step method. The function passes an integer k that tells how many iterations to perform. I then call the step function k times and perform the arithmatic of doubling a variable initialized at 0 and then adding the returned value of step each iteration. Lastly the variable is returned and is the final value of generate.

	In my two additional test blocks, I first test the step method with a very long string to make sure it doesn't have any trouble handling it. Then I test a very short string that will tap the same bit it's xoring against. I thought this was a good test because a lot of times I tend to not think of a situation like that when I'm creating an algorithm. The edge cases seem to fail a lot in my experiences. In the second test block I do the same thing but with the generate method. I test generate with a medium length string and a high number of iterations and then I test a smaller string with a lower number of iterations. I know that if there is a problem it will be in my generate function and not the step since I just tested it and it passed.
